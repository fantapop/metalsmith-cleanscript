
var path = require('path');
var fs = require('fs');

/**
 * Expose `plugin`.
 */

module.exports = plugin;

/**
 * Metalsmith plugin to generate a clean script
 *
 * @param {Object or String} options (optional)
 *     @property {String} out (optional)
 *     @property {Boolean} root (optional)
 * @return {Function}
 */

function plugin(options) {
    options = normalize(options);
    var out = options.out;
    var root = options.root;

    var result = '#!/bin/bash \n';
    result += '# file: ' + path.basename(out) + ' \n';
    result += '# generated by metalsmith-cleanscript \n';
    result += ' \n';

    // Will hold the directories to remove
    var dirs = {};

    return function(files, metalsmith, done) {

        // Add `rm $THIS_SCRIPT` to the clean script
        result += 'rm ' + path.join(metalsmith.destination(), out) + ' \n';

        Object.keys(files).forEach(function(file) {
            
            // Add `rm file` for each file in files to the result
            result += 'rm ';
            result += path.join(metalsmith.destination(), file) + ' \n';

            // Recursively add all the directories for file
            // Note: Will be removed after removing the files, since the
            //       directories have to be empty first.
            var dir = path.dirname(file);
            while (dir != '.') {
                dirs[dir] = null;
                dir = path.dirname(dir);
            }
        });
        result += ' \n';
        
        // Sort and reverse the array to remove the directories in order
        dirs = Object.keys(dirs).sort().reverse().forEach(function(dir) {
            // Add `rmdir dir` for all the directories
            // Note: Will fail for nonempty directories.. which is probably a 
            //       good thing!
            result += 'rmdir ';
            result += path.join(metalsmith.destination(), dir) + ' \n';
        });

        // Add the root directory to the script if specified
        if (root) result += 'rmdir ' + metalsmith.destination() + ' \n';

        files[out] = { 
            'contents': result,

            // Make the file readable globally and executable by user
            // This isn't supported by metalsmith yet, but hopefully it will!
            // If it won't be, we will have to use node's IO...
            'mode': 0544
        };

        done();
    };
}

function normalize(options) {
    options = options || {};

    // Convert to object if it's a string
    if (typeof options == 'string') {
        options = { 'out': options };
    }

    // Add other options with defaults
    options.root = options.hasOwnProperty('root') ? options.root : true;
    options.out =  options.hasOwnProperty('out')  ? options.out  : 'clean.sh';

    return options;
}
